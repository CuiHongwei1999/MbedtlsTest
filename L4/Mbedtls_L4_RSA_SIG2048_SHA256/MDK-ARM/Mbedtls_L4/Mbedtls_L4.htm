<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [Mbedtls_L4\Mbedtls_L4.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image Mbedtls_L4\Mbedtls_L4.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6160001: Last Updated: Sat Nov 26 21:12:42 2022
<BR><P>
<H3>Maximum Stack Usage =       3664 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
rsa_decrypt_wrap &rArr; mbedtls_rsa_pkcs1_decrypt &rArr; mbedtls_rsa_rsaes_oaep_decrypt &rArr; mbedtls_rsa_private &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_sub_abs &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[9c]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[39]">ADC3_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32l4xx_it.o(.text.BusFault_Handler) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[1e]">CAN1_RX0_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[1d]">CAN1_TX_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[4a]">COMP_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[47]">DFSDM1_FLT0_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[48]">DFSDM1_FLT1_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[49]">DFSDM1_FLT2_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[34]">DFSDM1_FLT3_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from stm32l4xx_it.o(.text.DMA1_Channel4_IRQHandler) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from stm32l4xx_it.o(.text.DMA1_Channel5_IRQHandler) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[42]">DMA2_Channel1_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[43]">DMA2_Channel2_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[44]">DMA2_Channel3_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[45]">DMA2_Channel4_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[46]">DMA2_Channel5_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[4d]">DMA2_Channel6_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[4e]">DMA2_Channel7_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32l4xx_it.o(.text.DebugMon_Handler) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[3a]">FMC_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[58]">FPU_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[61]">GetContent</a> from uart.o(.text.GetContent) referenced 2 times from uart.o(.text.HAL_UART_TxCpltCallback)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32l4xx_it.o(.text.HardFault_Handler) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[52]">I2C3_ER_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[51]">I2C3_EV_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[4b]">LPTIM1_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[4c]">LPTIM2_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[4f]">LPUART1_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32l4xx_it.o(.text.MemManage_Handler) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32l4xx_it.o(.text.NMI_Handler) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[b]">PVD_PVM_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32l4xx_it.o(.text.PendSV_Handler) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[50]">QUADSPI_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[57]">RNG_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[53]">SAI1_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[54]">SAI2_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[3b]">SDMMC1_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32l4xx_it.o(.text.SVC_Handler) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[55]">SWPMI1_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32l4xx_it.o(.text.SysTick_Handler) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[59]">SystemInit</a> from system_stm32l4xx.o(.text.SystemInit) referenced from startup_stm32l471xx.o(.text)
 <LI><a href="#[c]">TAMP_STAMP_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_TIM15_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_TIM17_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[23]">TIM1_UP_TIM16_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[40]">TIM6_DAC_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[36]">TIM8_UP_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[56]">TSC_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[5b]">UART_DMAAbortOnError</a> from stm32l4xx_hal_uart.o(.text.UART_DMAAbortOnError) referenced 2 times from stm32l4xx_hal_uart.o(.text.HAL_UART_IRQHandler)
 <LI><a href="#[5e]">UART_DMAError</a> from stm32l4xx_hal_uart.o(.text.UART_DMAError) referenced 2 times from stm32l4xx_hal_uart.o(.text.HAL_UART_Receive_DMA)
 <LI><a href="#[5e]">UART_DMAError</a> from stm32l4xx_hal_uart.o(.text.UART_DMAError) referenced 2 times from stm32l4xx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
 <LI><a href="#[5c]">UART_DMAReceiveCplt</a> from stm32l4xx_hal_uart.o(.text.UART_DMAReceiveCplt) referenced 2 times from stm32l4xx_hal_uart.o(.text.HAL_UART_Receive_DMA)
 <LI><a href="#[5d]">UART_DMARxHalfCplt</a> from stm32l4xx_hal_uart.o(.text.UART_DMARxHalfCplt) referenced 2 times from stm32l4xx_hal_uart.o(.text.HAL_UART_Receive_DMA)
 <LI><a href="#[5f]">UART_DMATransmitCplt</a> from stm32l4xx_hal_uart.o(.text.UART_DMATransmitCplt) referenced 2 times from stm32l4xx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
 <LI><a href="#[60]">UART_DMATxHalfCplt</a> from stm32l4xx_hal_uart.o(.text.UART_DMATxHalfCplt) referenced 2 times from stm32l4xx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from stm32l4xx_it.o(.text.USART1_IRQHandler) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32l4xx_it.o(.text.UsageFault_Handler) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32l471xx.o(.text) referenced from startup_stm32l471xx.o(RESET)
 <LI><a href="#[5a]">__main</a> from __main.o(!!!main) referenced from startup_stm32l471xx.o(.text)
 <LI><a href="#[6c]">memset</a> from memset.o(.text) referenced from platform_util.o(.rodata.memset_func)
 <LI><a href="#[6d]">my_mem_init</a> from ram_mgmt.o(.text.my_mem_init) referenced from ram_mgmt.o(.data.mallco_dev)
 <LI><a href="#[6e]">my_mem_perused</a> from ram_mgmt.o(.text.my_mem_perused) referenced from ram_mgmt.o(.data.mallco_dev)
 <LI><a href="#[69]">rsa_alloc_wrap</a> from pk_wrap.o(.text.rsa_alloc_wrap) referenced from pk_wrap.o(.rodata.mbedtls_rsa_info)
 <LI><a href="#[63]">rsa_can_do</a> from pk_wrap.o(.text.rsa_can_do) referenced from pk_wrap.o(.rodata.mbedtls_rsa_info)
 <LI><a href="#[68]">rsa_check_pair_wrap</a> from pk_wrap.o(.text.rsa_check_pair_wrap) referenced from pk_wrap.o(.rodata.mbedtls_rsa_info)
 <LI><a href="#[6b]">rsa_debug</a> from pk_wrap.o(.text.rsa_debug) referenced from pk_wrap.o(.rodata.mbedtls_rsa_info)
 <LI><a href="#[66]">rsa_decrypt_wrap</a> from pk_wrap.o(.text.rsa_decrypt_wrap) referenced from pk_wrap.o(.rodata.mbedtls_rsa_info)
 <LI><a href="#[67]">rsa_encrypt_wrap</a> from pk_wrap.o(.text.rsa_encrypt_wrap) referenced from pk_wrap.o(.rodata.mbedtls_rsa_info)
 <LI><a href="#[6a]">rsa_free_wrap</a> from pk_wrap.o(.text.rsa_free_wrap) referenced from pk_wrap.o(.rodata.mbedtls_rsa_info)
 <LI><a href="#[62]">rsa_get_bitlen</a> from pk_wrap.o(.text.rsa_get_bitlen) referenced from pk_wrap.o(.rodata.mbedtls_rsa_info)
 <LI><a href="#[65]">rsa_sign_wrap</a> from pk_wrap.o(.text.rsa_sign_wrap) referenced from pk_wrap.o(.rodata.mbedtls_rsa_info)
 <LI><a href="#[64]">rsa_verify_wrap</a> from pk_wrap.o(.text.rsa_verify_wrap) referenced from pk_wrap.o(.rodata.mbedtls_rsa_info)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5a]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(.text)
</UL>
<P><STRONG><a name="[6f]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[71]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[154]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[155]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[72]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[156]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[73]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[157]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))

<P><STRONG><a name="[75]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[76]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[158]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[7f]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[78]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[7a]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[159]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[15a]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[15b]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[15c]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[15d]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[15e]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[15f]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[160]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[161]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[162]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[163]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[164]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[165]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[166]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[167]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[168]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[169]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[16a]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[16b]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[16c]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[84]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[16d]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[16e]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[16f]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[170]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[171]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[172]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[173]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[70]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[174]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[7c]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[7e]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[175]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[80]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; mbedtls_pk_parse_public_key &rArr; mbedtls_pk_parse_subpubkey &rArr; pk_get_rsapubkey &rArr; mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_sub_abs &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[176]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[9d]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[83]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[177]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[85]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DFSDM1_FLT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DFSDM1_FLT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DFSDM1_FLT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>DFSDM1_FLT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DMA2_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>SWPMI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l471xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32l471xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[87]"></a>calloc</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, calloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_alloc_wrap
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
</UL>

<P><STRONG><a name="[8a]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_miller_rabin
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_free_wrap
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_free
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[d3]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[178]"></a>_ll_udiv</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[98]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[74]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[77]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[179]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[126]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
</UL>

<P><STRONG><a name="[123]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_pk_alg
</UL>

<P><STRONG><a name="[127]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
</UL>

<P><STRONG><a name="[ea]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ct_rsaes_pkcs1_v15_unpadding
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_rsassa_pkcs1_v15_encode
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_encrypt
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_update
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512
</UL>

<P><STRONG><a name="[8d]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[17a]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[17b]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[17c]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[17d]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>memset</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, memset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform_util.o(.rodata.memset_func)
</UL>
<P><STRONG><a name="[90]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_rsassa_pkcs1_v15_encode
</UL>

<P><STRONG><a name="[89]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_memclear
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ct_rsaes_pkcs1_v15_unpadding
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_rsassa_pss_sign
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_finish
</UL>

<P><STRONG><a name="[17e]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>_memset</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>

<P><STRONG><a name="[c1]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1
</UL>

<P><STRONG><a name="[150]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_finish
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512
</UL>

<P><STRONG><a name="[17f]"></a>__rt_memclr_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>_memset_w</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[180]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[181]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[182]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[183]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[184]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[185]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[186]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[92]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[94]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[7b]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[88]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>

<P><STRONG><a name="[8c]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[187]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[9b]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[188]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[96]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[189]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.text), UNUSED)

<P><STRONG><a name="[18a]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[93]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[95]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[7d]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[82]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[9a]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[99]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[86]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[18b]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[18c]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[9e]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[18d]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[a0]"></a>AppendList</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, my_list.o(.text.AppendList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AppendList &rArr; my_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_StaInit
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(.text.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_it.o(.text.DMA1_Channel4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA1_Channel4_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_it.o(.text.DMA1_Channel5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA1_Channel5_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[c2]"></a>Error_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(.text.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[b4]"></a>HAL_DMA_Abort</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, stm32l4xx_hal_dma.o(.text.HAL_DMA_Abort))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
</UL>

<P><STRONG><a name="[bb]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, stm32l4xx_hal_dma.o(.text.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[b5]"></a>HAL_DMA_GetError</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l4xx_hal_dma.o(.text.HAL_DMA_GetError))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
</UL>

<P><STRONG><a name="[a2]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, stm32l4xx_hal_dma.o(.text.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel5_IRQHandler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_IRQHandler
</UL>

<P><STRONG><a name="[c4]"></a>HAL_DMA_Init</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, stm32l4xx_hal_dma.o(.text.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[c7]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 164 bytes, Stack size 20 bytes, stm32l4xx_hal_dma.o(.text.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
</UL>

<P><STRONG><a name="[c3]"></a>HAL_GPIO_Init</STRONG> (Thumb, 506 bytes, Stack size 56 bytes, stm32l4xx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[ac]"></a>HAL_GetTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_hal.o(.text.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI2_Config
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_Config
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnRevNumData
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[ca]"></a>HAL_IncTick</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l4xx_hal.o(.text.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[a3]"></a>HAL_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32l4xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a5]"></a>HAL_InitTick</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32l4xx_hal.o(.text.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[a6]"></a>HAL_MspInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32l4xx_hal_msp.o(.text.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[c5]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(.text.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a8]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, stm32l4xx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a4]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[db]"></a>HAL_PWREx_ControlVoltageScaling</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(.text.HAL_PWREx_ControlVoltageScaling))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[af]"></a>HAL_PWREx_GetVoltageRange</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(.text.HAL_PWREx_GetVoltageRange))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[a9]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 928 bytes, Stack size 40 bytes, stm32l4xx_hal_rcc_ex.o(.text.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI2_Config
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_Config
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[ad]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 634 bytes, Stack size 32 bytes, stm32l4xx_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d1]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[d4]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(.text.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[d2]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 194 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[ae]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1908 bytes, Stack size 40 bytes, stm32l4xx_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_GetVoltageRange
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a7]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(.text.HAL_SYSTICK_Config))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[b0]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, stm32l4xx_hal_tim.o(.text.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b1]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, stm32l4xx_hal_msp.o(.text.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIM_Base_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[da]"></a>HAL_TIM_Base_Start</STRONG> (Thumb, 172 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(.text.HAL_TIM_Base_Start))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[b8]"></a>HAL_UARTEx_RxEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(.text.HAL_UARTEx_RxEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMARxHalfCplt
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAReceiveCplt
</UL>

<P><STRONG><a name="[b7]"></a>HAL_UARTEx_WakeupCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_uart_ex.o(.text.HAL_UARTEx_WakeupCallback))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[b3]"></a>HAL_UART_DMAStop</STRONG> (Thumb, 578 bytes, Stack size 16 bytes, stm32l4xx_hal_uart.o(.text.HAL_UART_DMAStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_UART_DMAStop
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_GetError
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myUART_IRQ_Handler
</UL>

<P><STRONG><a name="[b9]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(.text.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[b6]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 1506 bytes, Stack size 16 bytes, stm32l4xx_hal_uart.o(.text.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_UART_IRQHandler &rArr; HAL_UART_TxCpltCallback &rArr; SearchList
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_WakeupCallback
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[bc]"></a>HAL_UART_Init</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, stm32l4xx_hal_uart.o(.text.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bd]"></a>HAL_UART_MspInit</STRONG> (Thumb, 278 bytes, Stack size 184 bytes, stm32l4xx_hal_msp.o(.text.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[c6]"></a>HAL_UART_Receive_DMA</STRONG> (Thumb, 508 bytes, Stack size 24 bytes, stm32l4xx_hal_uart.o(.text.HAL_UART_Receive_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myUART_IRQ_Handler
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_StaInit
</UL>

<P><STRONG><a name="[cb]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(.text.HAL_UART_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAReceiveCplt
</UL>

<P><STRONG><a name="[cc]"></a>HAL_UART_RxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(.text.HAL_UART_RxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMARxHalfCplt
</UL>

<P><STRONG><a name="[c8]"></a>HAL_UART_Transmit_DMA</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, stm32l4xx_hal_uart.o(.text.HAL_UART_Transmit_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendNumData
</UL>

<P><STRONG><a name="[ba]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, uart.o(.text.HAL_UART_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_UART_TxCpltCallback &rArr; SearchList
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchList
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATransmitCplt
</UL>

<P><STRONG><a name="[cd]"></a>HAL_UART_TxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(.text.HAL_UART_TxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATxHalfCplt
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(.text.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(.text.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(.text.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[c9]"></a>SearchList</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, my_list.o(.text.SearchList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SearchList
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l4xx_it.o(.text.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>SystemInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, system_stm32l4xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(.text)
</UL>
<P><STRONG><a name="[b2]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 318 bytes, Stack size 8 bytes, stm32l4xx_hal_tim.o(.text.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[bf]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, stm32l4xx_hal_uart.o(.text.UART_AdvFeatureConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[ce]"></a>UART_SendNumData</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, uart.o(.text.UART_SendNumData))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = UART_SendNumData &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_free
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[be]"></a>UART_SetConfig</STRONG> (Thumb, 612 bytes, Stack size 16 bytes, stm32l4xx_hal_uart.o(.text.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[d5]"></a>UART_StaInit</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, uart.o(.text.UART_StaInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = UART_StaInit &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppendList
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_memclear
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c0]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 524 bytes, Stack size 24 bytes, stm32l4xx_hal_uart.o(.text.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[d7]"></a>UART_WaitOnRevNumData</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, uart.o(.text.UART_WaitOnRevNumData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = UART_WaitOnRevNumData &rArr; my_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_memcpy
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_memclear
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32l4xx_it.o(.text.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART1_IRQHandler &rArr; myUART_IRQ_Handler &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myUART_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(.text.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l471xx.o(RESET)
</UL>
<P><STRONG><a name="[d0]"></a>delay_ms</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, delay.o(.text.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendNumData
</UL>

<P><STRONG><a name="[81]"></a>main</STRONG> (Thumb, 816 bytes, Stack size 96 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672 + Unknown Stack Size
<LI>Call Chain = main &rArr; mbedtls_pk_parse_public_key &rArr; mbedtls_pk_parse_subpubkey &rArr; pk_get_rsapubkey &rArr; mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_sub_abs &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_public_key
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ControlVoltageScaling
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnRevNumData
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_StaInit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendNumData
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_memcpy
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_memclear
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_malloc
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_free
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[e2]"></a>mbedtls_asn1_get_alg</STRONG> (Thumb, 314 bytes, Stack size 24 bytes, asn1parse.o(.text.mbedtls_asn1_get_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_asn1_get_alg &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
</UL>

<P><STRONG><a name="[e5]"></a>mbedtls_asn1_get_bitstring_null</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, asn1parse.o(.text.mbedtls_asn1_get_bitstring_null))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_asn1_get_bitstring_null &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
</UL>

<P><STRONG><a name="[e3]"></a>mbedtls_asn1_get_len</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, asn1parse.o(.text.mbedtls_asn1_get_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_asn1_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring_null
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
</UL>

<P><STRONG><a name="[e6]"></a>mbedtls_asn1_get_tag</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, asn1parse.o(.text.mbedtls_asn1_get_tag))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_rsapubkey
</UL>

<P><STRONG><a name="[e7]"></a>mbedtls_base64_decode</STRONG> (Thumb, 498 bytes, Stack size 48 bytes, base64.o(.text.mbedtls_base64_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_base64_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ct_base64_dec_value
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
</UL>

<P><STRONG><a name="[e8]"></a>mbedtls_ct_base64_dec_value</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, constant_time.o(.text.mbedtls_ct_base64_dec_value))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_base64_decode
</UL>

<P><STRONG><a name="[14f]"></a>mbedtls_ct_memcmp</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, constant_time.o(.text.mbedtls_ct_memcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_ct_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
</UL>

<P><STRONG><a name="[151]"></a>mbedtls_ct_mpi_uint_cond_assign</STRONG> (Thumb, 248 bytes, Stack size 44 bytes, constant_time.o(.text.mbedtls_ct_mpi_uint_cond_assign))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbedtls_ct_mpi_uint_cond_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
</UL>

<P><STRONG><a name="[e9]"></a>mbedtls_ct_rsaes_pkcs1_v15_unpadding</STRONG> (Thumb, 814 bytes, Stack size 64 bytes, constant_time.o(.text.mbedtls_ct_rsaes_pkcs1_v15_unpadding))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = mbedtls_ct_rsaes_pkcs1_v15_unpadding
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_decrypt
</UL>

<P><STRONG><a name="[112]"></a>mbedtls_ct_size_bool_eq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, constant_time.o(.text.mbedtls_ct_size_bool_eq))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
</UL>

<P><STRONG><a name="[eb]"></a>mbedtls_internal_sha1_process</STRONG> (Thumb, 4154 bytes, Stack size 248 bytes, sha1.o(.text.mbedtls_internal_sha1_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = mbedtls_internal_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1
</UL>

<P><STRONG><a name="[ec]"></a>mbedtls_internal_sha256_process</STRONG> (Thumb, 1972 bytes, Stack size 344 bytes, sha256.o(.text.mbedtls_internal_sha256_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
</UL>

<P><STRONG><a name="[ed]"></a>mbedtls_internal_sha512_process</STRONG> (Thumb, 2648 bytes, Stack size 840 bytes, sha512.o(.text.mbedtls_internal_sha512_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = mbedtls_internal_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_update
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_finish
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512
</UL>

<P><STRONG><a name="[e0]"></a>mbedtls_md</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, md.o(.text.mbedtls_md))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144 + Unknown Stack Size
<LI>Call Chain = mbedtls_md &rArr; mbedtls_sha512 &rArr; mbedtls_sha512_finish &rArr; mbedtls_internal_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
</UL>

<P><STRONG><a name="[f1]"></a>mbedtls_md_finish</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, md.o(.text.mbedtls_md_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = mbedtls_md_finish &rArr; mbedtls_sha512_finish &rArr; mbedtls_internal_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_rsassa_pss_sign
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
</UL>

<P><STRONG><a name="[f5]"></a>mbedtls_md_free</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, md.o(.text.mbedtls_md_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_md_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_free
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_free
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_rsassa_pss_sign
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
</UL>

<P><STRONG><a name="[12d]"></a>mbedtls_md_get_size</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, md.o(.text.mbedtls_md_get_size))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_rsassa_pss_sign
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_rsassa_pkcs1_v15_encode
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
</UL>

<P><STRONG><a name="[df]"></a>mbedtls_md_info_from_type</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, md.o(.text.mbedtls_md_info_from_type))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_rsassa_pss_sign
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_rsassa_pkcs1_v15_encode
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
</UL>

<P><STRONG><a name="[14c]"></a>mbedtls_md_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, md.o(.text.mbedtls_md_init))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_rsassa_pss_sign
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
</UL>

<P><STRONG><a name="[f9]"></a>mbedtls_md_setup</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, md.o(.text.mbedtls_md_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = mbedtls_md_setup &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_init
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_rsassa_pss_sign
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
</UL>

<P><STRONG><a name="[fd]"></a>mbedtls_md_starts</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, md.o(.text.mbedtls_md_starts))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mbedtls_md_starts &rArr; mbedtls_sha512_starts
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_starts
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_starts
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_rsassa_pss_sign
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
</UL>

<P><STRONG><a name="[101]"></a>mbedtls_md_update</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, md.o(.text.mbedtls_md_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = mbedtls_md_update &rArr; mbedtls_sha512_update &rArr; mbedtls_internal_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_update
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_rsassa_pss_sign
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
</UL>

<P><STRONG><a name="[105]"></a>mbedtls_mpi_add_abs</STRONG> (Thumb, 648 bytes, Stack size 40 bytes, bignum.o(.text.mbedtls_mpi_add_abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
</UL>

<P><STRONG><a name="[107]"></a>mbedtls_mpi_add_int</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, bignum.o(.text.mbedtls_mpi_add_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = mbedtls_mpi_add_int &rArr; mbedtls_mpi_add_mpi &rArr; mbedtls_mpi_sub_abs &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
</UL>

<P><STRONG><a name="[108]"></a>mbedtls_mpi_add_mpi</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, bignum.o(.text.mbedtls_mpi_add_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = mbedtls_mpi_add_mpi &rArr; mbedtls_mpi_sub_abs &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_int
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[137]"></a>mbedtls_mpi_bitlen</STRONG> (Thumb, 234 bytes, Stack size 8 bytes, bignum.o(.text.mbedtls_mpi_bitlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_mpi_bitlen
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_rsassa_pss_sign
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
</UL>

<P><STRONG><a name="[135]"></a>mbedtls_mpi_cmp_int</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, bignum.o(.text.mbedtls_mpi_cmp_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_mpi_cmp_int
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_params
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_crt
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_private_exponent
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_check_context
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_complete
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
</UL>

<P><STRONG><a name="[133]"></a>mbedtls_mpi_cmp_mpi</STRONG> (Thumb, 320 bytes, Stack size 16 bytes, bignum.o(.text.mbedtls_mpi_cmp_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_mpi_cmp_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_params
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pub_priv
</UL>

<P><STRONG><a name="[106]"></a>mbedtls_mpi_copy</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, bignum.o(.text.mbedtls_mpi_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = mbedtls_mpi_copy &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_miller_rabin
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[10a]"></a>mbedtls_mpi_div_mpi</STRONG> (Thumb, 2422 bytes, Stack size 128 bytes, bignum.o(.text.mbedtls_mpi_div_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_sub_abs &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_private_exponent
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
</UL>

<P><STRONG><a name="[10f]"></a>mbedtls_mpi_exp_mod</STRONG> (Thumb, 2716 bytes, Stack size 912 bytes, bignum.o(.text.mbedtls_mpi_exp_mod))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216 + Unknown Stack Size
<LI>Call Chain = mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_sub_abs &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_safe_cond_assign
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ct_size_bool_eq
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_miller_rabin
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
</UL>

<P><STRONG><a name="[114]"></a>mbedtls_mpi_fill_random</STRONG> (Thumb, 322 bytes, Stack size 32 bytes, bignum.o(.text.mbedtls_mpi_fill_random))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = mbedtls_mpi_fill_random &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_miller_rabin
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[115]"></a>mbedtls_mpi_free</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bignum.o(.text.mbedtls_mpi_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_mpi_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_params
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_crt
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_private_exponent
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_crt
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_free
</UL>

<P><STRONG><a name="[116]"></a>mbedtls_mpi_gcd</STRONG> (Thumb, 932 bytes, Stack size 64 bytes, bignum.o(.text.mbedtls_mpi_gcd))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = mbedtls_mpi_gcd &rArr; mbedtls_mpi_sub_abs &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lsb
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_private_exponent
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
</UL>

<P><STRONG><a name="[136]"></a>mbedtls_mpi_get_bit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bignum.o(.text.mbedtls_mpi_get_bit))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_check_context
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
</UL>

<P><STRONG><a name="[118]"></a>mbedtls_mpi_grow</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, bignum.o(.text.mbedtls_mpi_grow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = mbedtls_mpi_grow &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_safe_cond_assign
</UL>

<P><STRONG><a name="[13c]"></a>mbedtls_mpi_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bignum.o(.text.mbedtls_mpi_init))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_params
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_crt
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_private_exponent
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_crt
</UL>

<P><STRONG><a name="[119]"></a>mbedtls_mpi_inv_mod</STRONG> (Thumb, 3074 bytes, Stack size 144 bytes, bignum.o(.text.mbedtls_mpi_inv_mod))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_sub_abs &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_private_exponent
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_crt
</UL>

<P><STRONG><a name="[11a]"></a>mbedtls_mpi_is_prime_ext</STRONG> (Thumb, 780 bytes, Stack size 64 bytes, bignum.o(.text.mbedtls_mpi_is_prime_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416 + Unknown Stack Size
<LI>Call Chain = mbedtls_mpi_is_prime_ext &rArr; mpi_miller_rabin &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_sub_abs &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_miller_rabin
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_params
</UL>

<P><STRONG><a name="[117]"></a>mbedtls_mpi_lsb</STRONG> (Thumb, 398 bytes, Stack size 8 bytes, bignum.o(.text.mbedtls_mpi_lsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_mpi_lsb
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_miller_rabin
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
</UL>

<P><STRONG><a name="[11c]"></a>mbedtls_mpi_lset</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, bignum.o(.text.mbedtls_mpi_lset))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = mbedtls_mpi_lset &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
</UL>

<P><STRONG><a name="[110]"></a>mbedtls_mpi_mod_mpi</STRONG> (Thumb, 430 bytes, Stack size 16 bytes, bignum.o(.text.mbedtls_mpi_mod_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_sub_abs &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_miller_rabin
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_params
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_crt
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_crt
</UL>

<P><STRONG><a name="[10e]"></a>mbedtls_mpi_mul_int</STRONG> (Thumb, 310 bytes, Stack size 40 bytes, bignum.o(.text.mbedtls_mpi_mul_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = mbedtls_mpi_mul_int &rArr; mbedtls_mpi_copy &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mul_hlp
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
</UL>

<P><STRONG><a name="[11e]"></a>mbedtls_mpi_mul_mpi</STRONG> (Thumb, 646 bytes, Stack size 72 bytes, bignum.o(.text.mbedtls_mpi_mul_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mul_hlp
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_miller_rabin
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_params
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_crt
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_private_exponent
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_complete
</UL>

<P><STRONG><a name="[11f]"></a>mbedtls_mpi_read_binary</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, bignum.o(.text.mbedtls_mpi_read_binary))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = mbedtls_mpi_read_binary &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_import_raw
</UL>

<P><STRONG><a name="[113]"></a>mbedtls_mpi_safe_cond_assign</STRONG> (Thumb, 378 bytes, Stack size 56 bytes, constant_time.o(.text.mbedtls_mpi_safe_cond_assign))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = mbedtls_mpi_safe_cond_assign &rArr; mbedtls_mpi_grow &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
</UL>

<P><STRONG><a name="[10b]"></a>mbedtls_mpi_shift_l</STRONG> (Thumb, 640 bytes, Stack size 40 bytes, bignum.o(.text.mbedtls_mpi_shift_l))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = mbedtls_mpi_shift_l &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
</UL>

<P><STRONG><a name="[10d]"></a>mbedtls_mpi_shift_r</STRONG> (Thumb, 504 bytes, Stack size 24 bytes, bignum.o(.text.mbedtls_mpi_shift_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = mbedtls_mpi_shift_r &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_miller_rabin
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
</UL>

<P><STRONG><a name="[134]"></a>mbedtls_mpi_size</STRONG> (Thumb, 238 bytes, Stack size 8 bytes, bignum.o(.text.mbedtls_mpi_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_mpi_size
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_check_context
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_import_raw
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_complete
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
</UL>

<P><STRONG><a name="[109]"></a>mbedtls_mpi_sub_abs</STRONG> (Thumb, 880 bytes, Stack size 72 bytes, bignum.o(.text.mbedtls_mpi_sub_abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = mbedtls_mpi_sub_abs &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
</UL>

<P><STRONG><a name="[120]"></a>mbedtls_mpi_sub_int</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, bignum.o(.text.mbedtls_mpi_sub_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = mbedtls_mpi_sub_int &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_sub_abs &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_params
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_crt
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_private_exponent
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_crt
</UL>

<P><STRONG><a name="[10c]"></a>mbedtls_mpi_sub_mpi</STRONG> (Thumb, 308 bytes, Stack size 24 bytes, bignum.o(.text.mbedtls_mpi_sub_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_sub_abs &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_miller_rabin
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_crt
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[121]"></a>mbedtls_mpi_write_binary</STRONG> (Thumb, 402 bytes, Stack size 32 bytes, bignum.o(.text.mbedtls_mpi_write_binary))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = mbedtls_mpi_write_binary
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[153]"></a>mbedtls_oid_get_oid_by_md</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, oid.o(.text.mbedtls_oid_get_oid_by_md))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_rsassa_pkcs1_v15_encode
</UL>

<P><STRONG><a name="[122]"></a>mbedtls_oid_get_pk_alg</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, oid.o(.text.mbedtls_oid_get_pk_alg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_oid_get_pk_alg &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
</UL>

<P><STRONG><a name="[124]"></a>mbedtls_pem_free</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, pem.o(.text.mbedtls_pem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_pem_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_public_key
</UL>

<P><STRONG><a name="[128]"></a>mbedtls_pem_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pem.o(.text.mbedtls_pem_init))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_public_key
</UL>

<P><STRONG><a name="[125]"></a>mbedtls_pem_read_buffer</STRONG> (Thumb, 324 bytes, Stack size 48 bytes, pem.o(.text.mbedtls_pem_read_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = mbedtls_pem_read_buffer &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_base64_decode
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_public_key
</UL>

<P><STRONG><a name="[dc]"></a>mbedtls_pk_free</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, pk.o(.text.mbedtls_pk_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_pk_free
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_public_key
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
</UL>

<P><STRONG><a name="[129]"></a>mbedtls_pk_info_from_type</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pk.o(.text.mbedtls_pk_info_from_type))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_public_key
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
</UL>

<P><STRONG><a name="[dd]"></a>mbedtls_pk_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pk.o(.text.mbedtls_pk_init))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[de]"></a>mbedtls_pk_parse_public_key</STRONG> (Thumb, 348 bytes, Stack size 72 bytes, pkparse.o(.text.mbedtls_pk_parse_public_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 1576 + Unknown Stack Size
<LI>Call Chain = mbedtls_pk_parse_public_key &rArr; mbedtls_pk_parse_subpubkey &rArr; pk_get_rsapubkey &rArr; mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_sub_abs &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_rsapubkey
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_setup
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_info_from_type
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12c]"></a>mbedtls_pk_parse_subpubkey</STRONG> (Thumb, 258 bytes, Stack size 64 bytes, pkparse.o(.text.mbedtls_pk_parse_subpubkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 1504 + Unknown Stack Size
<LI>Call Chain = mbedtls_pk_parse_subpubkey &rArr; pk_get_rsapubkey &rArr; mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_sub_abs &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring_null
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_rsapubkey
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_setup
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_info_from_type
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_pk_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_public_key
</UL>

<P><STRONG><a name="[12a]"></a>mbedtls_pk_setup</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, pk.o(.text.mbedtls_pk_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_pk_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_public_key
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
</UL>

<P><STRONG><a name="[e1]"></a>mbedtls_pk_verify</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, pk.o(.text.mbedtls_pk_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_pk_verify
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e4]"></a>mbedtls_platform_zeroize</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, platform_util.o(.text.mbedtls_platform_zeroize))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_miller_rabin
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_rsassa_pkcs1_v15_encode
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_decrypt
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_free
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_free
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_sha512_process
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_sha256_process
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_sha1_process
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_free
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512
</UL>

<P><STRONG><a name="[12e]"></a>mbedtls_rsa_check_pub_priv</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, rsa.o(.text.mbedtls_rsa_check_pub_priv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1528 + Unknown Stack Size
<LI>Call Chain = mbedtls_rsa_check_pub_priv &rArr; mbedtls_rsa_validate_params &rArr; mbedtls_mpi_is_prime_ext &rArr; mpi_miller_rabin &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_sub_abs &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_params
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_validate_crt
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_check_context
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_check_pair_wrap
</UL>

<P><STRONG><a name="[12f]"></a>mbedtls_rsa_check_pubkey</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, rsa.o(.text.mbedtls_rsa_check_pubkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_rsa_check_pubkey &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_get_bit
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_rsapubkey
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pub_priv
</UL>

<P><STRONG><a name="[138]"></a>mbedtls_rsa_complete</STRONG> (Thumb, 454 bytes, Stack size 96 bytes, rsa.o(.text.mbedtls_rsa_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376 + Unknown Stack Size
<LI>Call Chain = mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_sub_abs &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_private_exponent
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_primes
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_deduce_crt
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_check_context
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_rsapubkey
</UL>

<P><STRONG><a name="[13b]"></a>mbedtls_rsa_deduce_crt</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, rsa_alt_helpers.o(.text.mbedtls_rsa_deduce_crt))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = mbedtls_rsa_deduce_crt &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_sub_abs &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_complete
</UL>

<P><STRONG><a name="[139]"></a>mbedtls_rsa_deduce_primes</STRONG> (Thumb, 500 bytes, Stack size 64 bytes, rsa_alt_helpers.o(.text.mbedtls_rsa_deduce_primes))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280 + Unknown Stack Size
<LI>Call Chain = mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_sub_abs &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lsb
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_int
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_complete
</UL>

<P><STRONG><a name="[13a]"></a>mbedtls_rsa_deduce_private_exponent</STRONG> (Thumb, 196 bytes, Stack size 48 bytes, rsa_alt_helpers.o(.text.mbedtls_rsa_deduce_private_exponent))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = mbedtls_rsa_deduce_private_exponent &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_sub_abs &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_complete
</UL>

<P><STRONG><a name="[13d]"></a>mbedtls_rsa_free</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, rsa.o(.text.mbedtls_rsa_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_rsa_free &rArr; mbedtls_mpi_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_free_wrap
</UL>

<P><STRONG><a name="[152]"></a>mbedtls_rsa_get_len</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rsa.o(.text.mbedtls_rsa_get_len))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_verify_wrap
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_sign_wrap
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_get_bitlen
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_encrypt_wrap
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_decrypt_wrap
</UL>

<P><STRONG><a name="[13e]"></a>mbedtls_rsa_import_raw</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, rsa.o(.text.mbedtls_rsa_import_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = mbedtls_rsa_import_raw &rArr; mbedtls_mpi_read_binary &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_rsapubkey
</UL>

<P><STRONG><a name="[13f]"></a>mbedtls_rsa_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rsa.o(.text.mbedtls_rsa_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = mbedtls_rsa_init
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_alloc_wrap
</UL>

<P><STRONG><a name="[140]"></a>mbedtls_rsa_pkcs1_decrypt</STRONG> (Thumb, 144 bytes, Stack size 1072 bytes, rsa.o(.text.mbedtls_rsa_pkcs1_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 3632 + Unknown Stack Size
<LI>Call Chain = mbedtls_rsa_pkcs1_decrypt &rArr; mbedtls_rsa_rsaes_oaep_decrypt &rArr; mbedtls_rsa_private &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_sub_abs &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ct_rsaes_pkcs1_v15_unpadding
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_decrypt_wrap
</UL>

<P><STRONG><a name="[143]"></a>mbedtls_rsa_pkcs1_encrypt</STRONG> (Thumb, 230 bytes, Stack size 56 bytes, rsa.o(.text.mbedtls_rsa_pkcs1_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 1384 + Unknown Stack Size
<LI>Call Chain = mbedtls_rsa_pkcs1_encrypt &rArr; mbedtls_rsa_rsaes_oaep_encrypt &rArr; mbedtls_rsa_public &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_sub_abs &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_encrypt_wrap
</UL>

<P><STRONG><a name="[146]"></a>mbedtls_rsa_pkcs1_sign</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, rsa.o(.text.mbedtls_rsa_pkcs1_sign))
<BR><BR>[Stack]<UL><LI>Max Depth = 1520 + Unknown Stack Size
<LI>Call Chain = mbedtls_rsa_pkcs1_sign &rArr; rsa_rsassa_pss_sign &rArr; mbedtls_rsa_private &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_sub_abs &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_rsassa_pss_sign
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_sign_wrap
</UL>

<P><STRONG><a name="[149]"></a>mbedtls_rsa_pkcs1_verify</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, rsa.o(.text.mbedtls_rsa_pkcs1_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 2448 + Unknown Stack Size
<LI>Call Chain = mbedtls_rsa_pkcs1_verify &rArr; mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_public &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_sub_abs &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_verify_wrap
</UL>

<P><STRONG><a name="[142]"></a>mbedtls_rsa_private</STRONG> (Thumb, 936 bytes, Stack size 192 bytes, rsa.o(.text.mbedtls_rsa_private))
<BR><BR>[Stack]<UL><LI>Max Depth = 1408 + Unknown Stack Size
<LI>Call Chain = mbedtls_rsa_private &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_sub_abs &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_check_context
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_rsassa_pss_sign
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_decrypt
</UL>

<P><STRONG><a name="[144]"></a>mbedtls_rsa_public</STRONG> (Thumb, 198 bytes, Stack size 48 bytes, rsa.o(.text.mbedtls_rsa_public))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264 + Unknown Stack Size
<LI>Call Chain = mbedtls_rsa_public &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_sub_abs &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_get_bit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_encrypt
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
</UL>

<P><STRONG><a name="[141]"></a>mbedtls_rsa_rsaes_oaep_decrypt</STRONG> (Thumb, 708 bytes, Stack size 1152 bytes, rsa.o(.text.mbedtls_rsa_rsaes_oaep_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 2560 + Unknown Stack Size
<LI>Call Chain = mbedtls_rsa_rsaes_oaep_decrypt &rArr; mbedtls_rsa_private &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_sub_abs &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_decrypt
</UL>

<P><STRONG><a name="[145]"></a>mbedtls_rsa_rsaes_oaep_encrypt</STRONG> (Thumb, 300 bytes, Stack size 64 bytes, rsa.o(.text.mbedtls_rsa_rsaes_oaep_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328 + Unknown Stack Size
<LI>Call Chain = mbedtls_rsa_rsaes_oaep_encrypt &rArr; mbedtls_rsa_public &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_sub_abs &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_encrypt
</UL>

<P><STRONG><a name="[147]"></a>mbedtls_rsa_rsassa_pkcs1_v15_sign</STRONG> (Thumb, 246 bytes, Stack size 40 bytes, rsa.o(.text.mbedtls_rsa_rsassa_pkcs1_v15_sign))
<BR><BR>[Stack]<UL><LI>Max Depth = 1448 + Unknown Stack Size
<LI>Call Chain = mbedtls_rsa_rsassa_pkcs1_v15_sign &rArr; mbedtls_rsa_private &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_sub_abs &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ct_memcmp
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_rsassa_pkcs1_v15_encode
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_sign
</UL>

<P><STRONG><a name="[14a]"></a>mbedtls_rsa_rsassa_pkcs1_v15_verify</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, rsa.o(.text.mbedtls_rsa_rsassa_pkcs1_v15_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304 + Unknown Stack Size
<LI>Call Chain = mbedtls_rsa_rsassa_pkcs1_v15_verify &rArr; mbedtls_rsa_public &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_sub_abs &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ct_memcmp
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_rsassa_pkcs1_v15_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_verify
</UL>

<P><STRONG><a name="[14b]"></a>mbedtls_rsa_rsassa_pss_verify_ext</STRONG> (Thumb, 522 bytes, Stack size 1160 bytes, rsa.o(.text.mbedtls_rsa_rsassa_pss_verify_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 2424 + Unknown Stack Size
<LI>Call Chain = mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_public &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_sub_abs &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_update
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_starts
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_finish
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_verify
</UL>

<P><STRONG><a name="[132]"></a>mbedtls_rsa_validate_crt</STRONG> (Thumb, 318 bytes, Stack size 56 bytes, rsa_alt_helpers.o(.text.mbedtls_rsa_validate_crt))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = mbedtls_rsa_validate_crt &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_sub_abs &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pub_priv
</UL>

<P><STRONG><a name="[131]"></a>mbedtls_rsa_validate_params</STRONG> (Thumb, 512 bytes, Stack size 64 bytes, rsa_alt_helpers.o(.text.mbedtls_rsa_validate_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480 + Unknown Stack Size
<LI>Call Chain = mbedtls_rsa_validate_params &rArr; mbedtls_mpi_is_prime_ext &rArr; mpi_miller_rabin &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_sub_abs &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_is_prime_ext
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pub_priv
</UL>

<P><STRONG><a name="[ee]"></a>mbedtls_sha1</STRONG> (Thumb, 142 bytes, Stack size 120 bytes, sha1.o(.text.mbedtls_sha1))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = mbedtls_sha1 &rArr; mbedtls_sha1_finish &rArr; mbedtls_internal_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_sha1_process
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md
</UL>

<P><STRONG><a name="[f4]"></a>mbedtls_sha1_finish</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, sha1.o(.text.mbedtls_sha1_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = mbedtls_sha1_finish &rArr; mbedtls_internal_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_sha1_process
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_finish
</UL>

<P><STRONG><a name="[f8]"></a>mbedtls_sha1_free</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sha1.o(.text.mbedtls_sha1_free))
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
</UL>

<P><STRONG><a name="[fc]"></a>mbedtls_sha1_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sha1.o(.text.mbedtls_sha1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = mbedtls_sha1_init
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
</UL>

<P><STRONG><a name="[fe]"></a>mbedtls_sha1_starts</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, sha1.o(.text.mbedtls_sha1_starts))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_sha1_starts
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_starts
</UL>

<P><STRONG><a name="[104]"></a>mbedtls_sha1_update</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, sha1.o(.text.mbedtls_sha1_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = mbedtls_sha1_update &rArr; mbedtls_internal_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_sha1_process
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_update
</UL>

<P><STRONG><a name="[ef]"></a>mbedtls_sha256</STRONG> (Thumb, 250 bytes, Stack size 144 bytes, sha256.o(.text.mbedtls_sha256))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = mbedtls_sha256 &rArr; mbedtls_sha256_finish &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_sha256_process
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md
</UL>

<P><STRONG><a name="[f2]"></a>mbedtls_sha256_finish</STRONG> (Thumb, 298 bytes, Stack size 24 bytes, sha256.o(.text.mbedtls_sha256_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = mbedtls_sha256_finish &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_sha256_process
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_finish
</UL>

<P><STRONG><a name="[f6]"></a>mbedtls_sha256_free</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sha256.o(.text.mbedtls_sha256_free))
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
</UL>

<P><STRONG><a name="[fa]"></a>mbedtls_sha256_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sha256.o(.text.mbedtls_sha256_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = mbedtls_sha256_init
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
</UL>

<P><STRONG><a name="[ff]"></a>mbedtls_sha256_starts</STRONG> (Thumb, 166 bytes, Stack size 20 bytes, sha256.o(.text.mbedtls_sha256_starts))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mbedtls_sha256_starts
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_starts
</UL>

<P><STRONG><a name="[102]"></a>mbedtls_sha256_update</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, sha256.o(.text.mbedtls_sha256_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = mbedtls_sha256_update &rArr; mbedtls_internal_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_sha256_process
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_update
</UL>

<P><STRONG><a name="[f0]"></a>mbedtls_sha512</STRONG> (Thumb, 422 bytes, Stack size 280 bytes, sha512.o(.text.mbedtls_sha512))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144 + Unknown Stack Size
<LI>Call Chain = mbedtls_sha512 &rArr; mbedtls_sha512_finish &rArr; mbedtls_internal_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_sha512_process
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512_finish
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md
</UL>

<P><STRONG><a name="[f3]"></a>mbedtls_sha512_finish</STRONG> (Thumb, 630 bytes, Stack size 24 bytes, sha512.o(.text.mbedtls_sha512_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = mbedtls_sha512_finish &rArr; mbedtls_internal_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_sha512_process
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_finish
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha512
</UL>

<P><STRONG><a name="[f7]"></a>mbedtls_sha512_free</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sha512.o(.text.mbedtls_sha512_free))
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
</UL>

<P><STRONG><a name="[fb]"></a>mbedtls_sha512_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sha512.o(.text.mbedtls_sha512_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = mbedtls_sha512_init
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
</UL>

<P><STRONG><a name="[100]"></a>mbedtls_sha512_starts</STRONG> (Thumb, 348 bytes, Stack size 52 bytes, sha512.o(.text.mbedtls_sha512_starts))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mbedtls_sha512_starts
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_starts
</UL>

<P><STRONG><a name="[103]"></a>mbedtls_sha512_update</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, sha512.o(.text.mbedtls_sha512_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = mbedtls_sha512_update &rArr; mbedtls_internal_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_sha512_process
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_update
</UL>

<P><STRONG><a name="[d9]"></a>myUART_IRQ_Handler</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, uart.o(.text.myUART_IRQ_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = myUART_IRQ_Handler &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[cf]"></a>my_free</STRONG> (Thumb, 198 bytes, Stack size 8 bytes, ram_mgmt.o(.text.my_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = my_free
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendNumData
</UL>

<P><STRONG><a name="[a1]"></a>my_malloc</STRONG> (Thumb, 296 bytes, Stack size 16 bytes, ram_mgmt.o(.text.my_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = my_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnRevNumData
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_StaInit
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppendList
</UL>

<P><STRONG><a name="[6d]"></a>my_mem_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ram_mgmt.o(.text.my_mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = my_mem_init
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ram_mgmt.o(.data.mallco_dev)
</UL>
<P><STRONG><a name="[6e]"></a>my_mem_perused</STRONG> (Thumb, 168 bytes, Stack size 20 bytes, ram_mgmt.o(.text.my_mem_perused))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = my_mem_perused
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ram_mgmt.o(.data.mallco_dev)
</UL>
<P><STRONG><a name="[d6]"></a>my_memclear</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ram_mgmt.o(.text.my_memclear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = my_memclear
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnRevNumData
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_StaInit
</UL>

<P><STRONG><a name="[d8]"></a>my_memcpy</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, ram_mgmt.o(.text.my_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = my_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnRevNumData
</UL>

<P><STRONG><a name="[79]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[18e]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[18f]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[61]"></a>GetContent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(.text.GetContent))
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.text.HAL_UART_TxCpltCallback)
</UL>
<P><STRONG><a name="[aa]"></a>RCCEx_PLLSAI1_Config</STRONG> (Thumb, 366 bytes, Stack size 24 bytes, stm32l4xx_hal_rcc_ex.o(.text.RCCEx_PLLSAI1_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCCEx_PLLSAI1_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[ab]"></a>RCCEx_PLLSAI2_Config</STRONG> (Thumb, 326 bytes, Stack size 24 bytes, stm32l4xx_hal_rcc_ex.o(.text.RCCEx_PLLSAI2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[5b]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(.text.UART_DMAAbortOnError))
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(.text.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[5e]"></a>UART_DMAError</STRONG> (Thumb, 396 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(.text.UART_DMAError))
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32l4xx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
<LI> stm32l4xx_hal_uart.o(.text.HAL_UART_Receive_DMA)
</UL>
<P><STRONG><a name="[5c]"></a>UART_DMAReceiveCplt</STRONG> (Thumb, 348 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(.text.UART_DMAReceiveCplt))
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(.text.HAL_UART_Receive_DMA)
</UL>
<P><STRONG><a name="[5d]"></a>UART_DMARxHalfCplt</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(.text.UART_DMARxHalfCplt))
<BR><BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxHalfCpltCallback
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(.text.HAL_UART_Receive_DMA)
</UL>
<P><STRONG><a name="[5f]"></a>UART_DMATransmitCplt</STRONG> (Thumb, 176 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(.text.UART_DMATransmitCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_DMATransmitCplt &rArr; HAL_UART_TxCpltCallback &rArr; SearchList
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[60]"></a>UART_DMATxHalfCplt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(.text.UART_DMATxHalfCplt))
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[11b]"></a>mpi_miller_rabin</STRONG> (Thumb, 2310 bytes, Stack size 136 bytes, bignum.o(.text.mpi_miller_rabin))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352 + Unknown Stack Size
<LI>Call Chain = mpi_miller_rabin &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_sub_abs &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lsb
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_is_prime_ext
</UL>

<P><STRONG><a name="[111]"></a>mpi_montmul</STRONG> (Thumb, 528 bytes, Stack size 56 bytes, bignum.o(.text.mpi_montmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + Unknown Stack Size
<LI>Call Chain = mpi_montmul &rArr; mbedtls_ct_mpi_uint_cond_assign
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ct_mpi_uint_cond_assign
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mul_hlp
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
</UL>

<P><STRONG><a name="[11d]"></a>mpi_mul_hlp</STRONG> (Thumb, 912 bytes, Stack size 32 bytes, bignum.o(.text.mpi_mul_hlp))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mpi_mul_hlp
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
</UL>

<P><STRONG><a name="[69]"></a>rsa_alloc_wrap</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, pk_wrap.o(.text.rsa_alloc_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = rsa_alloc_wrap &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.rodata.mbedtls_rsa_info)
</UL>
<P><STRONG><a name="[63]"></a>rsa_can_do</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pk_wrap.o(.text.rsa_can_do))
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.rodata.mbedtls_rsa_info)
</UL>
<P><STRONG><a name="[68]"></a>rsa_check_pair_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pk_wrap.o(.text.rsa_check_pair_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 1528 + Unknown Stack Size
<LI>Call Chain = rsa_check_pair_wrap &rArr; mbedtls_rsa_check_pub_priv &rArr; mbedtls_rsa_validate_params &rArr; mbedtls_mpi_is_prime_ext &rArr; mpi_miller_rabin &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_sub_abs &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pub_priv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.rodata.mbedtls_rsa_info)
</UL>
<P><STRONG><a name="[6b]"></a>rsa_debug</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, pk_wrap.o(.text.rsa_debug))
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.rodata.mbedtls_rsa_info)
</UL>
<P><STRONG><a name="[66]"></a>rsa_decrypt_wrap</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, pk_wrap.o(.text.rsa_decrypt_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 3664 + Unknown Stack Size
<LI>Call Chain = rsa_decrypt_wrap &rArr; mbedtls_rsa_pkcs1_decrypt &rArr; mbedtls_rsa_rsaes_oaep_decrypt &rArr; mbedtls_rsa_private &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_sub_abs &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_decrypt
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_get_len
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.rodata.mbedtls_rsa_info)
</UL>
<P><STRONG><a name="[67]"></a>rsa_encrypt_wrap</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, pk_wrap.o(.text.rsa_encrypt_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 1424 + Unknown Stack Size
<LI>Call Chain = rsa_encrypt_wrap &rArr; mbedtls_rsa_pkcs1_encrypt &rArr; mbedtls_rsa_rsaes_oaep_encrypt &rArr; mbedtls_rsa_public &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_sub_abs &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_encrypt
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_get_len
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.rodata.mbedtls_rsa_info)
</UL>
<P><STRONG><a name="[6a]"></a>rsa_free_wrap</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, pk_wrap.o(.text.rsa_free_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rsa_free_wrap &rArr; mbedtls_rsa_free &rArr; mbedtls_mpi_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.rodata.mbedtls_rsa_info)
</UL>
<P><STRONG><a name="[62]"></a>rsa_get_bitlen</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pk_wrap.o(.text.rsa_get_bitlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rsa_get_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_get_len
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.rodata.mbedtls_rsa_info)
</UL>
<P><STRONG><a name="[65]"></a>rsa_sign_wrap</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, pk_wrap.o(.text.rsa_sign_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 1560 + Unknown Stack Size
<LI>Call Chain = rsa_sign_wrap &rArr; mbedtls_rsa_pkcs1_sign &rArr; rsa_rsassa_pss_sign &rArr; mbedtls_rsa_private &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_sub_abs &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_sign
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_get_len
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.rodata.mbedtls_rsa_info)
</UL>
<P><STRONG><a name="[64]"></a>rsa_verify_wrap</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, pk_wrap.o(.text.rsa_verify_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 2488 + Unknown Stack Size
<LI>Call Chain = rsa_verify_wrap &rArr; mbedtls_rsa_pkcs1_verify &rArr; mbedtls_rsa_rsassa_pss_verify_ext &rArr; mbedtls_rsa_public &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_sub_abs &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_verify
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_get_len
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.rodata.mbedtls_rsa_info)
</UL>
<P><STRONG><a name="[12b]"></a>pk_get_rsapubkey</STRONG> (Thumb, 224 bytes, Stack size 64 bytes, pkparse.o(.text.pk_get_rsapubkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440 + Unknown Stack Size
<LI>Call Chain = pk_get_rsapubkey &rArr; mbedtls_rsa_complete &rArr; mbedtls_rsa_deduce_primes &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_sub_abs &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_import_raw
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_complete
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_public_key
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
</UL>

<P><STRONG><a name="[14d]"></a>mgf_mask</STRONG> (Thumb, 350 bytes, Stack size 112 bytes, rsa.o(.text.mgf_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 984 + Unknown Stack Size
<LI>Call Chain = mgf_mask &rArr; mbedtls_md_update &rArr; mbedtls_sha512_update &rArr; mbedtls_internal_sha512_process
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_update
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_starts
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_finish
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_encrypt
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_oaep_decrypt
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_rsassa_pss_sign
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pss_verify_ext
</UL>

<P><STRONG><a name="[130]"></a>rsa_check_context</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, rsa.o(.text.rsa_check_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rsa_check_context &rArr; mbedtls_mpi_cmp_int
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_get_bit
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_complete
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pub_priv
</UL>

<P><STRONG><a name="[14e]"></a>rsa_rsassa_pkcs1_v15_encode</STRONG> (Thumb, 284 bytes, Stack size 48 bytes, rsa.o(.text.rsa_rsassa_pkcs1_v15_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rsa_rsassa_pkcs1_v15_encode &rArr; __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_oid_by_md
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
</UL>

<P><STRONG><a name="[148]"></a>rsa_rsassa_pss_sign</STRONG> (Thumb, 416 bytes, Stack size 80 bytes, rsa.o(.text.rsa_rsassa_pss_sign))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488 + Unknown Stack Size
<LI>Call Chain = rsa_rsassa_pss_sign &rArr; mbedtls_rsa_private &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_sub_abs &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf_mask
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_update
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_starts
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_finish
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_sign
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
